{"version":3,"sources":["TextInput.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","intl","useIntl","useState","formatMessage","id","text","setText","className","defaultValue","onChange","e","target","value","replace","onClick","select","type","contentEditable","readOnly","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","availableLanguages","Object","keys","messages","language","languages","find","lang","indexOf","ReactDOM","render","defaultLocale","locale","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mgCAIe,SAASA,IACpB,IAAMC,EAAOC,cADmB,EAERC,mBAASF,EAAKG,cAAc,CAAEC,GAAI,sBAF1B,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAMhC,OACA,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,oBAAmB,kBAAC,IAAD,CAAkBH,GAAG,kBACvD,8BAAUI,aAAcH,EAAMI,SAAU,SAAAC,GAAC,OAAIJ,EAAkBI,EAAEC,OAAOC,MAN3CC,QAAQ,MAAO,mBAShD,yBAAKN,UAAU,aACX,yBAAKA,UAAU,oBAAmB,kBAAC,IAAD,CAAkBH,GAAG,oBACvD,8BAAUU,QAAS,qBAAEH,OAAmBI,UAAUC,KAAK,OAAOJ,MAAOP,EAAMY,iBAAiB,EAAOC,UAAU,M,MCG1GC,MAjBf,WACE,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,8CAGF,8BACE,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAkBH,GAAG,UAEvB,kBAAC,EAAD,SCJFgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oBCvF3DC,EAAqBC,OAAOC,KAAKC,GAGjCC,GAFgBrB,UAAUsB,WAAa,CAAC,OAEfC,MAAK,SAAAC,GAAI,OAA0C,IAAtCP,EAAmBQ,QAAQD,OAJjD,KAMtBE,IAASC,OACT,kBAAC,IAAD,CAAcP,SAAUA,EAASC,GAAWO,cAPtB,KAOoDC,OAAQR,GAC9E,kBAAC,EAAD,OAEFS,SAASC,eAAe,SDInB,SAAkBhC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgC,IAAIC,oBAAwBxC,OAAOC,SAASwC,MACpDC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAMtC,EAAK,UAAMmC,oBAAN,sBAEP1C,IAgEV,SAAiCO,EAAOC,GAEtCsC,MAAMvC,GACHK,MAAK,SAAAmC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYd,QAAQ,cAG5CzB,UAAUC,cAAc0C,MAAMxC,MAAK,SAAAC,GACjCA,EAAawC,aAAazC,MAAK,WAC7BV,OAAOC,SAASmD,eAKpBhD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAkC,CAAwBhD,EAAOC,GAI/BC,UAAUC,cAAc0C,MAAMxC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC3B/BE,K","file":"static/js/main.72af945d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport \"./TextInput.css\";\r\n\r\nexport default function TextInput() {\r\n    const intl = useIntl();\r\n    const [text, setText] = useState(intl.formatMessage({ id: 'inputPlaceholder' }));\r\n\r\n    let transform = (srcText) => srcText.replace(/\\n/g, '\\n\\u2063\\n');\r\n\r\n    return (\r\n    <div className='TextInputContainer'>\r\n        <div className='TextInput'>\r\n            <div className='TextInput--title'><FormattedMessage id='srcTextTitle' /></div>\r\n            <textarea defaultValue={text} onChange={e => setText(transform(e.target.value)) }></textarea>\r\n        </div>\r\n\r\n        <div className='TextInput'>\r\n            <div className='TextInput--title'><FormattedMessage id='fixedTextTitle' /></div>\r\n            <textarea onClick={({target}) => target.select()} type='text' value={text} contentEditable={false} readOnly={true} />\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React from 'react';\nimport { FormattedMessage } from \"react-intl\";\nimport TextInput from './TextInput';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Caption Fixer</h1>\n      </header>\n\n      <main>\n        <div className='copy'>\n          <FormattedMessage id=\"copy\"  />\n        </div>\n        <TextInput />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { IntlProvider } from 'react-intl';\nimport messages from \"./locale.json\";\n\nconst defaultLocale = 'en';\nconst availableLanguages = Object.keys(messages);\nconst userLanguages = navigator.languages || ['en'];\n\nconst language = userLanguages.find(lang => availableLanguages.indexOf(lang) !== -1) || defaultLocale;\n\nReactDOM.render(\n<IntlProvider messages={messages[language]} defaultLocale={defaultLocale} locale={language} >\n    <App />\n</IntlProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}